{"version":3,"sources":["components/profile.js","components/navbar.js","components/experience.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","position","left","top","transform","paper","padding","spacing","margin","maxWidth","PaperSheet","classes","React","useEffect","loadCSS","document","querySelector","react_default","a","createElement","className","Paper","Typography","variant","component","IconButton","clsx","href","flexGrow","menuButton","marginRight","title","NavBar","react_router_dom","AppBar","color","Toolbar","Grid","justify","container","item","Link","underline","Button","react_router","path","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUASMA,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,WAAYC,KAAM,MAAOC,IAAK,MACxCC,UAAW,yBAEbC,MAAO,CACLC,QAASP,EAAMQ,QAAQ,GACvBC,OAAQ,OACRC,SAAU,KAEZF,QAAS,CACPC,OAAQT,EAAMQ,QAAQ,OAIX,SAASG,IACtB,IAAMC,EAAUd,IAWhB,OAPAe,IAAMC,UAAU,WACdC,kBACE,0DACAC,SAASC,cAAc,uBAExB,IAGDC,EAAAC,EAAAC,cAAA,OAAKC,UAAWT,EAAQX,MACtBiB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOD,UAAWT,EAAQN,OACxBY,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYF,UAAWT,EAAQJ,QAASgB,QAAQ,KAAKC,UAAU,MAA/D,wBAGAP,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYE,UAAU,KAAtB,qFAGAP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAYL,UAAWM,YAAKf,EAAQJ,QAAS,mBAAoBoB,KAnBtD,yCAoBXV,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAYL,UAAWM,YAAKf,EAAQJ,QAAS,wBAAyBoB,KAnB7D,6CCnBX9B,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJ4B,SAAU,GAEZC,WAAY,CACVC,YAAa/B,EAAMQ,QAAQ,IAE7BwB,MAAO,CACLH,SAAU,MAIC,SAASI,IACNnC,IAChB,OACEoB,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAQjC,SAAS,SAASkC,MAAM,WAC9BlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEC,QAAQ,gBACRC,WAAS,EACThC,QAAS,IAETU,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMG,MAAI,GACRvB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,QAAQ,MAClBN,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMd,KAAK,IAAIe,UAAU,OAAOP,MAAM,WAAtC,mBAKJlB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMG,MAAI,GACRvB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQR,MAAM,UAAUR,KAAK,eAA7B,cACAV,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQR,MAAM,UAAUR,KAAK,aAA7B,eAINV,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACtB,UAAWd,MCvCvBZ,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,WAAYC,KAAM,MAAOC,IAAK,MACxCC,UAAW,yBAEbC,MAAO,CACLC,QAASP,EAAMQ,QAAQ,GACvBC,OAAQ,OACRC,SAAU,QCCCsC,MARf,WACE,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACa,EAAD,QCGcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASxC,SAASyC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a08e5cbe.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport clsx from 'clsx';\r\nimport { loadCSS } from 'fg-loadcss';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    position: 'absolute', left: '50%', top: '50%',\r\n    transform: 'translate(-50%, -50%)'\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    margin: 'auto',\r\n    maxWidth: 400,\r\n  },\r\n  spacing: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function PaperSheet() {\r\n  const classes = useStyles();\r\n  const linkedIn = \"https://www.linkedin.com/in/jpancho/\";\r\n  const gitHub = \"https://github.com/jpancho\";\r\n\r\n  React.useEffect(() => {\r\n    loadCSS(\r\n      'https://use.fontawesome.com/releases/v5.1.0/css/all.css',\r\n      document.querySelector('#font-awesome-css'),\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Typography className={classes.spacing} variant=\"h5\" component=\"h3\">\r\n          Hi I'm Justin Pancho\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          a Software Developer with a passion for games, technology, sports, and great food\r\n        </Typography>\r\n        <IconButton className={clsx(classes.spacing, 'fab fa-linkedin')} href={linkedIn} />\r\n        <IconButton className={clsx(classes.spacing, 'fab fa-github-square')} href={gitHub} />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { AppBar, Toolbar, Typography, Button } from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport PaperSheet from './profile';\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function NavBar() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Router>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Toolbar>\r\n          <Grid\r\n            justify=\"space-between\"\r\n            container\r\n            spacing={24}\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h5\">\r\n                <Link href=\"/\" underline=\"none\" color=\"default\">\r\n                  Justin Pancho\r\n                </Link>\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button color=\"inherit\" href=\"/experience\">Experience</Button>\r\n              <Button color=\"inherit\" href=\"/projects\">Projects</Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n        <Route path=\"/\" exact component={PaperSheet} />\r\n      </AppBar>\r\n    </Router>\r\n\r\n  )\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    position: 'absolute', left: '50%', top: '50%',\r\n    transform: 'translate(-50%, -50%)'\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: 'auto',\r\n    maxWidth: 400,\r\n  },\r\n}));\r\n\r\nexport default function Experience() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          Absolute Software - QA Automation Engineer Intern\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          a Software Developer with a passion for games, technology, and great food\r\n        </Typography>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from \"./components/navbar\";\r\nimport PaperSheet from \"./components/profile\";\r\nimport Experience from \"./components/experience\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}